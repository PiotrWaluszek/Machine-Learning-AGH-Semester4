# -*- coding: utf-8 -*-
"""lab04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1__ipgCB2cE2DuNPFaumUimsbc1BbVAhi
"""

import numpy as np
import pandas as pd
import pickle
from sklearn.metrics import accuracy_score, mean_squared_error
from sklearn import datasets
from sklearn.svm import LinearSVC, LinearSVR, SVR
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
from sklearn.model_selection import train_test_split, GridSearchCV

data_breast_cancer = datasets.load_breast_cancer(as_frame=True)
data_iris = datasets.load_iris(as_frame=True)

X_breast_cancer = data_breast_cancer['data'][['mean area', 'mean smoothness']]
y_breast_cancer = data_breast_cancer['target'].astype(np.uint8)
X_breast_cancer_train, X_breast_cancer_test, y_breast_cancer_train, y_breast_cancer_test = train_test_split(X_breast_cancer, y_breast_cancer, test_size=0.2)

svm_clf_breast_cancer_without_scaling = LinearSVC(C=1, loss="hinge", random_state=42)
svm_clf_breast_cancer_without_scaling.fit(X_breast_cancer_train, y_breast_cancer_train)

y_breast_cancer_train_predict_without_scaling = svm_clf_breast_cancer_without_scaling.predict(X_breast_cancer_train)
y_breast_cancer_test_predict_without_scaling = svm_clf_breast_cancer_without_scaling.predict(X_breast_cancer_test)
acc_breast_cancer_train_without_scaling = accuracy_score(y_breast_cancer_train, y_breast_cancer_train_predict_without_scaling)
acc_breast_cancer_test_without_scaling = accuracy_score(y_breast_cancer_test, y_breast_cancer_test_predict_without_scaling)

svm_clf_breast_cancer_with_scaling = Pipeline([("scaler", StandardScaler()), ("linear_svc", LinearSVC(C=1, loss="hinge", random_state=42))])
svm_clf_breast_cancer_with_scaling.fit(X_breast_cancer_train, y_breast_cancer_train)
y_breast_cancer_train_predict_with_scaling = svm_clf_breast_cancer_with_scaling.predict(X_breast_cancer_train)
y_breast_cancer_test_predict_with_scaling = svm_clf_breast_cancer_with_scaling.predict(X_breast_cancer_test)

acc_breast_cancer_train_with_scaling = accuracy_score(y_breast_cancer_train, y_breast_cancer_train_predict_with_scaling)
acc_breast_cancer_test_with_scaling = accuracy_score(y_breast_cancer_test, y_breast_cancer_test_predict_with_scaling)
acc_breast_cancer_result = [acc_breast_cancer_train_without_scaling, acc_breast_cancer_test_without_scaling,
                            acc_breast_cancer_train_with_scaling, acc_breast_cancer_test_with_scaling]

with open('bc_acc.pkl', 'wb') as output_file:
  pickle.dump(acc_breast_cancer_result, output_file)

X_iris = data_iris['data'][['petal length (cm)', 'petal width (cm)']]
y_iris = (data_iris['target'] == 2).astype(np.uint8)
X_iris_train, X_iris_test, y_iris_train, y_iris_test = train_test_split(X_iris, y_iris, test_size=0.2)

svm_clf_iris_without_scaling = LinearSVC(C=1, loss="hinge", random_state=42)
svm_clf_iris_without_scaling.fit(X_iris_train, y_iris_train)
y_iris_train_predict_without_scaling = svm_clf_iris_without_scaling.predict(X_iris_train)
y_iris_test_predict_without_scaling = svm_clf_iris_without_scaling.predict(X_iris_test)
acc_iris_train_without_scaling = accuracy_score(y_iris_train, y_iris_train_predict_without_scaling)
acc_iris_test_without_scaling = accuracy_score(y_iris_test, y_iris_test_predict_without_scaling)

svm_clf_iris_with_scaling = Pipeline([("scaler", StandardScaler()), ("linear_svc", LinearSVC(C=1, loss="hinge", random_state=42))])
svm_clf_iris_with_scaling.fit(X_iris_train, y_iris_train)
y_iris_train_predict_with_scaling = svm_clf_iris_with_scaling.predict(X_iris_train)
y_iris_test_predict_with_scaling = svm_clf_iris_with_scaling.predict(X_iris_test)
acc_iris_train_with_scaling = accuracy_score(y_iris_train, y_iris_train_predict_with_scaling)
acc_iris_test_with_scaling = accuracy_score(y_iris_test, y_iris_test_predict_with_scaling)

acc_iris_result = [acc_iris_train_without_scaling, acc_iris_test_without_scaling, acc_iris_train_with_scaling, acc_iris_test_with_scaling]

with open('iris_acc.pkl', 'wb') as output_file:
  pickle.dump(acc_iris_result, output_file)

size = 900
X = np.random.rand(size) * 5 - 2.5
w4, w3, w2, w1, w0 = 1, 2, 1, -4, 2
y = w4 * (X**4) + w3 * (X**3) + w2 * (X**2) + w1 * X + w0 + np.random.randn(size) * 8 - 4
df = pd.DataFrame({'x': X, 'y': y})

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train = X_train.reshape(-1,1)
X_test = X_test.reshape(-1,1)
y_train = y_train.reshape(-1,1)
y_test = y_test.reshape(-1,1)

svm_regression = Pipeline([("polynomial_features", PolynomialFeatures(degree=4)), ("regressor", LinearSVR())])
svm_regression.fit(X_train, y_train)
y_svm_regression_train = svm_regression.predict(X_train)
y_svm_regression_test = svm_regression.predict(X_test)
svm_regression_mse_train = mean_squared_error(y_train, y_svm_regression_train)
svm_regression_mse_test = mean_squared_error(y_test, y_svm_regression_test)
svm_poly_regression = SVR(kernel="poly", degree=4)
svm_poly_regression.fit(X_train, y_train)

y_svm_poly_regression_train = svm_poly_regression.predict(X_train)
y_svm_poly_regression_test = svm_poly_regression.predict(X_test)

svm_poly_regression_mse_train = mean_squared_error(y_train, y_svm_poly_regression_train)
svm_poly_regression_mse_test = mean_squared_error(y_test, y_svm_poly_regression_test)

param_grid = {"C" : [0.1, 1, 10], "coef0" : [0.1, 1, 10]}

grid_search = GridSearchCV(SVR(kernel='poly', degree=4), param_grid, scoring='neg_mean_squared_error')
grid_search.fit(X.reshape(-1,1), y)
params = grid_search.best_params_
svm_optimal_poly_regression = SVR(kernel="poly", degree=4, C=params['C'], coef0=params['coef0'])
svm_optimal_poly_regression.fit(X_train, y_train)
y_svm_optimal_poly_regression_train = svm_optimal_poly_regression.predict(X_train)
y_svm_optimal_poly_regression_test = svm_optimal_poly_regression.predict(X_test)
svm_optimal_poly_regression_mse_train = mean_squared_error(y_train, y_svm_optimal_poly_regression_train)
svm_optimal_poly_regression_mse_test = mean_squared_error(y_test, y_svm_optimal_poly_regression_test)

svm_mse = [svm_regression_mse_train, svm_regression_mse_test, svm_optimal_poly_regression_mse_train, svm_optimal_poly_regression_mse_test]
with open("reg_mse.pkl", 'wb') as output_file:
    pickle.dump(svm_mse, output_file)

